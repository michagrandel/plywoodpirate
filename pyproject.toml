[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "plywoodpirate"
dynamic = ["version"]
description = 'General purpose modules and packages that are useful for any project'
readme = "Readme.md"
requires-python = ">=3.9"
license = { file = "License.md" }
keywords = []
authors = [
  { name = "Micha Grandel", email = "michagrandel@proton.me" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "requests",
    "apppath",
    "click",
    "psutil",
    "gputil",
    "nvsmi"
]

[project.urls]
Documentation = "https://github.com/michagrandel/plywoodpirate#readme"
Issues = "https://github.com/michagrandel/plywoodpirate/issues"
Source = "https://github.com/michagrandel/plywoodpirate"

[tool.hatch.version]
path = "src/plywoodpirate/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "ruff",
    "pyright",
    "pytest",
    "git-cliff",
    "pytest-asyncio"
]

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/plywoodpirate tests}"

[tool.hatch.envs.default.scripts]
lint = "ruff src tests"
typecheck = "pyright src tests"
test = "pytest"

[tool.coverage.run]
source_pkgs = ["plywoodpirate", "tests"]
branch = true
parallel = true
omit = [
  "src/plywoodpirate/__about__.py",
]

[tool.coverage.paths]
plywoodpirate = ["src/plywoodpirate", "*/plywoodpirate/src/plywoodpirate"]
tests = ["tests", "*/plywoodpirate/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
fix = true
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".github",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
include = ["*.py"]
# same as Black
line-length = 88
indent-width = 4

target-version = "py39"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "lf"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

[tool.pyright]
include = ["src"]
exclude = [
    "**/__pycache__",
]
# ignore = ["src/oldstuff"]
# defineConstant = { DEBUG = true }
# stubPath = "src/stubs"

reportMissingImports = "error"
# reportMissingTypeStubs = false

pythonVersion = "3.9"
# pythonPlatform = "Linux"

[pycodestyle]
# E501 reports lines that exceed the length of 100.
max-line-length = 88

[tool.ruff.lint.pycodestyle]
max-line-length = 88

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]
max-args = 6
max-positional-args = 3
max-bool-expr = 4
max-branches = 4
max-locals = 6
max-nested-blocks = 5
max-public-methods = 10
max-returns = 4
max-statements = 60
